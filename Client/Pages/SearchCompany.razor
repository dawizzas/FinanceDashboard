@page "/"
@page "/searchcompany"

@attribute [Authorize]

@inject HttpClient Http
@inject IToastService toastService
@using FinanceDashboard.Shared.Models
@using System.Text.Json.Nodes
@using System.Text.Json
@using System.Security.Claims

<div class="search-company-area bg-color pad100">
    <div class="container">
        <div class="row mb-4">
            <div class="col-lg-12">
                <div class="container mt-4">
                    <div class="row d-flex justify-content-center">
                        <div class="col-md-9"> 
                            <h3 class="heading mt-1 text-center">Search for a company</h3>
                            <div class="d-flex justify-content-center px-5">
                                <div class="search"> 
                                    <input type="text" class="search-input" placeholder="Search..." name="" @bind-value="CurrentQuery" />
                                    <a class="search-icon" @onclick="SearchCompanies"><i class="oi oi-magnifying-glass"></i></a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="tab-content" id="myTabContent">
                    <div class="tab-pane fade active show" id="home" role="tabpanel">
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th class="text-center" scope="col">Symbol</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Financial Data</th>
                                        <th class="text-center" scope="col">Add to portfolio</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var company in SearchedCompanies)
                                    {
                                        double output;
                                        @if(double.TryParse(company.CurrentPrice, out output))
                                        {
                                            <tr class="inner-box">
                                                <td>
                                                    <div class="r-no text-center">
                                                        <span>@company.Symbol</span>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="r-no">
                                                        <span>@company.Name</span>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="event-wrap">
                                                        <h3><a>Current Price: @company.CurrentPrice</a></h3>
                                                        <div class="meta">
                                                            <div class="revenue-growth">
                                                                <a>Revenue Growth: @company.RevenueGrowth</a>
                                                            </div>
                                                            <div class="profit-margins">
                                                                <a>Profit Margin: @company.ProfitMargins</a>
                                                            </div>
                                                            <div class="recommendation">
                                                                @if(@company.Recommendation.Contains("buy"))
                                                                {
                                                                    <span>Recommendation: <span style="color: green;">@company.Recommendation</span></span>
                                                                } else {
                                                                    <span>Recommendation: <span style="color: red;">@company.Recommendation</span></span>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="primary-btn text-center add-to-portofolio">
                                                        <input type="number" placeholder="Quantity" @bind-value="@Quantity" />
                                                        <a class="btn btn-primary fd-btn" @onclick="@(() => AddToPortfolio(company))">Add to portfolio</a>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string CurrentQuery { get; set; } = string.Empty;
    private List<Company> SearchedCompanies = new List<Company>();
    private int Quantity { get; set; }
    
    @* private async Task EnterPressed(KeyboardEventArgs e)
    {
        if(e.Key == "Enter")
        {
            await SearchCompanies();
        }
    } *@

    private async Task SearchCompanies()
    {
        var user = (await _stateProvider.GetAuthenticationStateAsync()).User;
        SearchedCompanies = new List<Company>();
        try {
            CompanySearchResult compantSearchResults = await Http.GetFromJsonAsync<CompanySearchResult>("api/yahoofinance/search?q=" + CurrentQuery) ?? new CompanySearchResult();

            foreach (var quote in compantSearchResults.Quotes)
            {
                Company newCompany = new Company { Symbol = quote.Symbol, Name = quote.LongName };
                FinanceDashboard.Shared.Models.History newHistory = new FinanceDashboard.Shared.Models.History { Username = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier).Value, 
                    CompanySymbol = newCompany.Symbol, CompanyName = newCompany.Name };

                FinancialDataResult quoteResult = await Http.GetFromJsonAsync<FinancialDataResult>("api/yahoofinance/financialdata?symbol=" + newCompany.Symbol) ?? new FinancialDataResult();
                await Http.PostAsJsonAsync<FinanceDashboard.Shared.Models.History>("api/history", newHistory);

                newCompany.CurrentPrice = quoteResult?.QuoteSummary?.Result?.FirstOrDefault()?.FinancialData.CurrentPrice.fmt ?? "---";
                newCompany.RevenueGrowth = quoteResult?.QuoteSummary?.Result?.FirstOrDefault()?.FinancialData.RevenueGrowth.fmt ?? "---";
                newCompany.ProfitMargins = quoteResult?.QuoteSummary?.Result?.FirstOrDefault()?.FinancialData.ProfitMargins.fmt ?? "---";
                newCompany.Recommendation = quoteResult?.QuoteSummary?.Result?.FirstOrDefault()?.FinancialData.RecommendationKey ?? "---";

                SearchedCompanies.Add(newCompany);
            }
        } catch(Exception ex)
        {
            SearchedCompanies = new List<Company>();
            System.Console.WriteLine(ex.Message);
        }
    }

    private async Task AddToPortfolio(Company company)
    {
        try {
            company.Quantity = Quantity;
            double CurrentPrice;

            if(double.TryParse(company.CurrentPrice, out CurrentPrice))
            {
                company.CollectiveBuyingPrice = CurrentPrice * Quantity;
            } else {
                company.CollectiveBuyingPrice = -1;
            }

            await Http.PutAsJsonAsync("api/user/addcompany", company);
            
            toastService.ShowSuccess("Company has been added to portfolio", "Success!");
        } catch(Exception e)
        {
            System.Console.WriteLine(e.Message);
            toastService.ShowError("An error has occurred", "Error");
        }
    }
}
